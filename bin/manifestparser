#!/usr/bin/env node

var // Dependencies
	ApkReader = require('../lib/apkreader'),
	PlistReader = require('../lib/plistreader'),
	IpaReader = require('../lib/ipareader'),
	fs = require('fs'), 
	// Parse cli arguments
	argv = require('optimist')
	.usage("Extract xml from a binary blob. Supported formats are: .ipa, .apk, .plist, .zip.\nUsage: $0")
	.string('output-format', ['xml', 'json'])
	.default('output-format', 'xml')
	.demand('target')
	.describe('target', 'Target file to read')
	.describe('output-format', 'Output format (xml|json)')
	.argv,	
	// Manifest output format
	outputFormat = argv['output-format'],
	// Path to target
	target = argv['target'],
	// Type of target
	isTargetType = function(type) {
		var targetLw = target.toLowerCase();
		return targetLw.substr(-(type.length)) === type;
	}
	
// Always default to xml
if(outputFormat !== 'json') outputFormat = 'xml';

// Check if we support target format
if(!isTargetType('.ipa') && !isTargetType('.apk') &&
    !isTargetType('.zip') && !isTargetType('.plist')) {
	process.write.stdout("Invalid binary format for filename " + target + ". Supported formats are: .ipa, .apk, .plist, .zip");
	process.exit(1);
}

// Only support extracting the android manifest for apk files
if(isTargetType('.apk')) {

	// Parse actual apk manifest
	new ApkReader(target, {
		outputFormat: outputFormat
	}).on('manifest', function(manifest) {
	 	process.stdout.write(manifest);
	}).on('error', function(err) {
		process.stdout.write(err);
	}).parse();
	
	return;

} 

if(isTargetType('.ipa')) {
	
	new IpaReader(target, {
		outputFormat: outputFormat
	}).on('plist', function(plist) {
	 	process.stdout.write(plist);
	}).on('error', function(err) {
		process.stdout.write(err);
	}).parse();
	
	return;
	
}

// Extract plist from a zip file or single file
new PlistReader(target, {
	outputFormat: outputFormat
}).on('plist', function(plist) {
 	process.stdout.write(plist);
}).on('error', function(err) {
	process.stdout.write(err);
}).parse();